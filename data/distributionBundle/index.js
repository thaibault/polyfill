#!/usr/bin/env node
// -*- coding: utf-8 -*-
/** @module index */
'use strict';

// region import
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _clientnode = _interopRequireWildcard(require("clientnode"));
var _http = require("http");
var _polyfillLibrary = _interopRequireDefault(require("polyfill-library"));
var _url = _interopRequireDefault(require("url"));
var _ref2, _process$argv$;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// endregion
// region types
var Flags = ['always', 'gated'];
var UnknownTechnologyConfigurations = ['ignore', 'polyfill'];
// endregion
var instance = (0, _http.createServer)( /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(request, response) {
    var queryParameter, excludes, _iterator, _step, parameter, features, _iterator2, _step2, _parameter, flags, _iterator3, _step3, _parameter2, givenUnknown, unknown, featureOptions, _iterator4, _step4, feature, _configuration, configuration;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          console.info('Got request url', request.url);
          if (!request.url.startsWith('/polyfill.')) {
            _context.next = 29;
            break;
          }
          // region parse query parameter
          queryParameter = _url["default"].parse(request.url, true).query;
          excludes = [];
          _iterator = _createForOfIteratorHelper([].concat(queryParameter.excludes || []));
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              parameter = _step.value;
              excludes = excludes.concat(parameter.split(','));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          features = [];
          _iterator2 = _createForOfIteratorHelper([].concat(queryParameter.features || []));
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              _parameter = _step2.value;
              features = features.concat(_parameter.split(','));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          flags = [];
          _iterator3 = _createForOfIteratorHelper([].concat(queryParameter.flags || []));
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              _parameter2 = _step3.value;
              flags = flags.concat(_parameter2.split(',').filter(function (flagCandidate) {
                return Flags.includes(flagCandidate);
              }));
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          givenUnknown = [].concat(queryParameter.unknown || []);
          unknown = givenUnknown.length && UnknownTechnologyConfigurations.includes(givenUnknown[0]) ? givenUnknown[0] : 'polyfill'; // endregion
          // region build feature options
          featureOptions = {};
          _iterator4 = _createForOfIteratorHelper(features);
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              feature = _step4.value;
              _configuration = feature.split('|');
              featureOptions[_configuration[0]] = {
                flags: _configuration.length > 1 ? _configuration[1] : flags
              };
            }
            // endregion
            // region build configuration and log
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          configuration = {
            excludes: excludes,
            features: featureOptions,
            minify: request.url.includes('.min.js?'),
            uaString: request.headers['user-agent'],
            unknown: unknown
          };
          console.info('Apply polyfill configuration: "' + "".concat(_clientnode["default"].represent(configuration), "\""));
          // endregion
          // region write response
          response.statusCode = 200;
          response.setHeader('Content-Type', 'text/javascript; charset=utf-8');
          _context.t0 = response;
          _context.next = 25;
          return _polyfillLibrary["default"].getPolyfillString(configuration);
        case 25:
          _context.t1 = _context.sent;
          _context.t0.write.call(_context.t0, _context.t1);
          _context.next = 30;
          break;
        case 29:
          response.statusCode = 404;
        case 30:
          _context.next = 36;
          break;
        case 32:
          _context.prev = 32;
          _context.t2 = _context["catch"](0);
          console.warn('Error occurred:', _context.t2);
          response.statusCode = 500;
        case 36:
          _context.prev = 36;
          response.end();
          return _context.finish(36);
        case 39:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[0, 32, 36, 39]]);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
var port = parseInt((_ref2 = (_process$argv$ = process.argv[2]) !== null && _process$argv$ !== void 0 ? _process$argv$ : process.env.PORT) !== null && _ref2 !== void 0 ? _ref2 : 8080);
instance.listen(port, function () {
  return console.info("Listen on port ".concat(port, " for incoming requests."));
});
var _iterator5 = _createForOfIteratorHelper(_clientnode.CloseEventNames),
  _step5;
try {
  var _loop = function _loop() {
    var name = _step5.value;
    process.on(name, function () {
      console.info("\nGot \"".concat(name, "\" signal: stopping server."));
      instance.close(function () {
        return console.info('Server stopped.');
      });
    });
  };
  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
    _loop();
  }
  // region vim modline
  // vim: set tabstop=4 shiftwidth=4 expandtab:
  // vim: foldmethod=marker foldmarker=region,endregion:
  // endregion
} catch (err) {
  _iterator5.e(err);
} finally {
  _iterator5.f();
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90eXBlb2YiLCJfcmVnZW5lcmF0b3IiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfY2xpZW50bm9kZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2h0dHAiLCJfcG9seWZpbGxMaWJyYXJ5IiwiX3VybCIsIl9yZWYyIiwiX3Byb2Nlc3MkYXJndiQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsIkYiLCJzIiwiZG9uZSIsInZhbHVlIiwiX2UiLCJmIiwiVHlwZUVycm9yIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsImVyciIsInN0ZXAiLCJuZXh0IiwiX2UyIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiRmxhZ3MiLCJVbmtub3duVGVjaG5vbG9neUNvbmZpZ3VyYXRpb25zIiwiaW5zdGFuY2UiLCJjcmVhdGVTZXJ2ZXIiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJxdWVyeVBhcmFtZXRlciIsImV4Y2x1ZGVzIiwiX2l0ZXJhdG9yIiwiX3N0ZXAiLCJwYXJhbWV0ZXIiLCJmZWF0dXJlcyIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJfcGFyYW1ldGVyIiwiZmxhZ3MiLCJfaXRlcmF0b3IzIiwiX3N0ZXAzIiwiX3BhcmFtZXRlcjIiLCJnaXZlblVua25vd24iLCJ1bmtub3duIiwiZmVhdHVyZU9wdGlvbnMiLCJfaXRlcmF0b3I0IiwiX3N0ZXA0IiwiZmVhdHVyZSIsIl9jb25maWd1cmF0aW9uIiwiY29uZmlndXJhdGlvbiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsImNvbnNvbGUiLCJpbmZvIiwidXJsIiwic3RhcnRzV2l0aCIsInBhcnNlIiwicXVlcnkiLCJjb25jYXQiLCJzcGxpdCIsImZpbHRlciIsImZsYWdDYW5kaWRhdGUiLCJpbmNsdWRlcyIsIm1pbmlmeSIsInVhU3RyaW5nIiwiaGVhZGVycyIsIlRvb2xzIiwicmVwcmVzZW50Iiwic3RhdHVzQ29kZSIsInNldEhlYWRlciIsInQwIiwicG9seWZpbGxMaWJyYXJ5IiwiZ2V0UG9seWZpbGxTdHJpbmciLCJ0MSIsInNlbnQiLCJ3cml0ZSIsInQyIiwid2FybiIsImVuZCIsImZpbmlzaCIsInN0b3AiLCJfeCIsIl94MiIsImFwcGx5IiwiYXJndW1lbnRzIiwicG9ydCIsInBhcnNlSW50IiwicHJvY2VzcyIsImFyZ3YiLCJlbnYiLCJQT1JUIiwibGlzdGVuIiwiX2l0ZXJhdG9yNSIsIkNsb3NlRXZlbnROYW1lcyIsIl9zdGVwNSIsIl9sb29wIiwib24iLCJjbG9zZSJdLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICMhL3Vzci9iaW4vZW52IGJhYmVsLW5vZGVcbi8vIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLVxuLyoqIEBtb2R1bGUgaW5kZXggKi9cbid1c2Ugc3RyaWN0J1xuLy8gcmVnaW9uIGltcG9ydFxuaW1wb3J0IFRvb2xzLCB7Q2xvc2VFdmVudE5hbWVzfSBmcm9tICdjbGllbnRub2RlJ1xuaW1wb3J0IHtNYXBwaW5nfSBmcm9tICdjbGllbnRub2RlL3R5cGUnXG5pbXBvcnQge1xuICAgIGNyZWF0ZVNlcnZlciBhcyBjcmVhdGVIdHRwMlNlcnZlcixcbiAgICBIdHRwMlNlcnZlciBhcyBIdHRwU2VydmVyLFxuICAgIEh0dHAyU2VydmVyUmVzcG9uc2UgYXMgSFRUUFNlcnZlclJlc3BvbnNlLFxuICAgIEh0dHAyU2VydmVyUmVxdWVzdCBhcyBIVFRQU2VydmVyUmVxdWVzdFxufSBmcm9tICdodHRwMidcbmltcG9ydCB7Y3JlYXRlU2VydmVyfSBmcm9tICdodHRwJ1xuaW1wb3J0IHBvbHlmaWxsTGlicmFyeSBmcm9tICdwb2x5ZmlsbC1saWJyYXJ5J1xuaW1wb3J0IHVybCBmcm9tICd1cmwnXG4vLyBlbmRyZWdpb25cbi8vIHJlZ2lvbiB0eXBlc1xuY29uc3QgRmxhZ3MgPSBbJ2Fsd2F5cycsICdnYXRlZCddIGFzIGNvbnN0XG50eXBlIEZsYWcgPSB0eXBlb2YgRmxhZ3NbbnVtYmVyXVxuY29uc3QgVW5rbm93blRlY2hub2xvZ3lDb25maWd1cmF0aW9ucyA9IFsnaWdub3JlJywgJ3BvbHlmaWxsJ10gYXMgY29uc3RcbnR5cGUgVW5rbm93blRlY2hub2xvZ3lDb25maWd1cmF0aW9uID1cbiAgICB0eXBlb2YgVW5rbm93blRlY2hub2xvZ3lDb25maWd1cmF0aW9uc1tudW1iZXJdXG4vLyBlbmRyZWdpb25cbmNvbnN0IGluc3RhbmNlOkh0dHBTZXJ2ZXIgPSAoXG4gICAgY3JlYXRlU2VydmVyIGFzIHVua25vd24gYXMgdHlwZW9mIGNyZWF0ZUh0dHAyU2VydmVyXG4pKFxuICAgIGFzeW5jIChcbiAgICAgICAgcmVxdWVzdDpIVFRQU2VydmVyUmVxdWVzdCwgcmVzcG9uc2U6SFRUUFNlcnZlclJlc3BvbnNlXG4gICAgKTpQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnR290IHJlcXVlc3QgdXJsJywgcmVxdWVzdC51cmwpXG5cbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnVybC5zdGFydHNXaXRoKCcvcG9seWZpbGwuJykpIHtcbiAgICAgICAgICAgICAgICAvLyByZWdpb24gcGFyc2UgcXVlcnkgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgY29uc3QgcXVlcnlQYXJhbWV0ZXIgPSB1cmwucGFyc2UocmVxdWVzdC51cmwsIHRydWUpLnF1ZXJ5XG5cbiAgICAgICAgICAgICAgICBsZXQgZXhjbHVkZXM6QXJyYXk8c3RyaW5nPiA9IFtdXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgKFtdIGFzIEFycmF5PHN0cmluZz4pLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXIuZXhjbHVkZXMgfHwgW11cbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICBleGNsdWRlcyA9IGV4Y2x1ZGVzLmNvbmNhdChwYXJhbWV0ZXIuc3BsaXQoJywnKSlcblxuICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlczpBcnJheTxzdHJpbmc+ID0gW11cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiAoW10gYXMgQXJyYXk8c3RyaW5nPikuY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlci5mZWF0dXJlcyB8fCBbXVxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzID0gZmVhdHVyZXMuY29uY2F0KHBhcmFtZXRlci5zcGxpdCgnLCcpKVxuXG4gICAgICAgICAgICAgICAgbGV0IGZsYWdzOkFycmF5PEZsYWc+ID0gW11cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcmFtZXRlciBvZiAoW10gYXMgQXJyYXk8c3RyaW5nPikuY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtZXRlci5mbGFncyB8fCBbXVxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzID0gZmxhZ3MuY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChmbGFnQ2FuZGlkYXRlOnN0cmluZyk6Ym9vbGVhbiA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGbGFncy5pbmNsdWRlcyhmbGFnQ2FuZGlkYXRlIGFzIEZsYWcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBhcyBBcnJheTxGbGFnPlxuICAgICAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICBjb25zdCBnaXZlblVua25vd246QXJyYXk8c3RyaW5nPiA9XG4gICAgICAgICAgICAgICAgICAgIChbXSBhcyBBcnJheTxzdHJpbmc+KS5jb25jYXQocXVlcnlQYXJhbWV0ZXIudW5rbm93biB8fCBbXSlcbiAgICAgICAgICAgICAgICBjb25zdCB1bmtub3duOlVua25vd25UZWNobm9sb2d5Q29uZmlndXJhdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgIGdpdmVuVW5rbm93bi5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgVW5rbm93blRlY2hub2xvZ3lDb25maWd1cmF0aW9ucy5pbmNsdWRlcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuVW5rbm93blswXSBhcyBVbmtub3duVGVjaG5vbG9neUNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBnaXZlblVua25vd25bMF0gYXMgVW5rbm93blRlY2hub2xvZ3lDb25maWd1cmF0aW9uIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb2x5ZmlsbCdcbiAgICAgICAgICAgICAgICAvLyBlbmRyZWdpb25cbiAgICAgICAgICAgICAgICAvLyByZWdpb24gYnVpbGQgZmVhdHVyZSBvcHRpb25zXG4gICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZU9wdGlvbnM6TWFwcGluZzx7ZmxhZ3M6QXJyYXk8RmxhZz59PiA9IHt9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb246W3N0cmluZywgLi4uQXJyYXk8RmxhZz5dID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc3BsaXQoJ3wnKSBhcyBbc3RyaW5nLCAuLi5BcnJheTxGbGFnPl1cblxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0aW9uc1tjb25maWd1cmF0aW9uWzBdXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWdzOiBjb25maWd1cmF0aW9uLmxlbmd0aCA+IDEgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb25bMV0gYXMgdW5rbm93biBhcyBBcnJheTxGbGFnPiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3NcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBlbmRyZWdpb25cbiAgICAgICAgICAgICAgICAvLyByZWdpb24gYnVpbGQgY29uZmlndXJhdGlvbiBhbmQgbG9nXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlndXJhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZXMsXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBmZWF0dXJlT3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbWluaWZ5OiByZXF1ZXN0LnVybC5pbmNsdWRlcygnLm1pbi5qcz8nKSxcbiAgICAgICAgICAgICAgICAgICAgdWFTdHJpbmc6IHJlcXVlc3QuaGVhZGVyc1sndXNlci1hZ2VudCddLFxuICAgICAgICAgICAgICAgICAgICB1bmtub3duXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICAgICAgICAgICAgICAnQXBwbHkgcG9seWZpbGwgY29uZmlndXJhdGlvbjogXCInICtcbiAgICAgICAgICAgICAgICAgICAgYCR7VG9vbHMucmVwcmVzZW50KGNvbmZpZ3VyYXRpb24pfVwiYFxuICAgICAgICAgICAgICAgIClcbiAgICAgIC